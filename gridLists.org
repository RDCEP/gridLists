
* Download the GADM data

#+begin_src sh
  wget http://www.gadm.org/data2/gadm_v2_shp.zip -O data/gadm_v2_shp.zip
  unzip data/gadm_v2_shp.zip -d data
#+end_src

* Find the Sahelian countries
  :PROPERTIES:
  :session:  *R:2*
  :END:

#+begin_src R
  library( ascii)
  options( asciiType= "org")
  
  library( foreign)
  
  gadmDbf <- read.dbf( "data/gadm2.dbf")
  iso <- unique( gadmDbf[, c("ISO", "NAME_0")])
  
  sahel <-
    iso[ iso$NAME_0 %in%
        c( "Cape Verde",
          "Guinea-Bissau",
          "Gambia",
          "Burkina Faso",
          "Senegal",
          "Mauritania",
          "Mali",
          "Niger",
          "Chad",
          "Sudan",
          "South Sudan",
          "Eritrea"), ]
  colnames( sahel) <- c( "ISO", "Name")
  
  
#+end_src

#+name: sahelCountriesTable
#+begin_src R :results output org replace :exports both
  ascii(
    sahel,
    include.rownames= FALSE)
#+end_src

#+RESULTS: sahelCountriesTable
#+BEGIN_ORG
 | ISO | Name          |
|-----+---------------|
| BFA | Burkina Faso  |
| CPV | Cape Verde    |
| TCD | Chad          |
| ERI | Eritrea       |
| GMB | Gambia        |
| GNB | Guinea-Bissau |
| MLI | Mali          |
| MRT | Mauritania    |
| NER | Niger         |
| SEN | Senegal       |
| SSD | South Sudan   |
| SDN | Sudan         |
#+END_ORG

#+name: sahelString()
#+begin_src R :results value verbatim replace :exports both
  whereClause <-
    sprintf(
      "-where 'ISO IN (\"%s\")'",
      paste(
        as.character( sahel$ISO),
        collapse= "\",\""))
#+end_src

#+RESULTS: sahelString
: -where 'ISO IN ("BFA","CPV","TCD","ERI","GMB","GNB","MLI","MRT","NER","SEN","SSD","SDN")'

#+name: sahelOgrCmd()
#+begin_src R :results value verbatim replace
    paste( "ogr2ogr -progress -overwrite", whereClause,
          "data/sahel.shp data/gadm2.shp gadm2")
#+end_src

#+RESULTS: sahelOgrCmd
: ogr2ogr -progress -overwrite -where 'ISO IN ("BFA","CPV","TCD","ERI","GMB","GNB","MLI","MRT","NER","SEN","SSD","SDN")' data/sahel.shp data/gadm2.shp gadm2

  
#+name: sahelOgr
#+begin_src sh :results output replace :session *shell* :noweb yes
  <<sahelOgrCmd()>>
#+end_src


#+RESULTS: sahelOgr
: 0...10...20...30...40...50...60...70...80...90...100 - done.

#+begin_src sh :results output replace :session *shell*
  gdal_rasterize -at -a_nodata 255 -init 255 -burn 1 \
    -te -180 -90 180 90 -tr 0.5 0.5 -ot Byte \
    -l sahel data/sahel.shp data/sahel.tif
#+end_src

#+RESULTS:
: 
: > 0...10...20...30...40...50...60...70...80...90...100 - done.

#+begin_src sh :session *shell* :results silent :eval no
  qgis --extent -27,-9,45,40 --snapshot images/sahel.png gridLists.qgs
#+end_src

#+CAPTION: Grid cells modeled in the Sahel region
#+LABEL:   fig:sahel
[[images/sahel.png]]


#+begin_src R
  library( raster)
  
  sahel <- raster( "data/sahel.tif")
  NAvalue( sahel) <- 255
  sahel <- setMinMax( sahel)
  
  sahelCells <- ( 1: ncell( sahel))[ which( sahel[] == 1)]
  
  world <- function( cellRes= 0.5) {
    world <- raster()
    res( world) <- cellRes
    world
  }
  
  translateCells <- function(
    x,
    from= world(),
    to= world( 5/60),
    offset= -res( to) /2) {
    cellFromXY(
      to,
      xyFromCell( from, x) + offset)
  }
  
  
#+end_src

#+name: sahelCellsTable
#+begin_src R :results output org replace :exports both
    ascii(
      head( 
        data.frame( 
          sahelCells,
          translateCells( sahelCells))),
      digits= 0,
      colnames= c( "30 min", "5 min"),
      include.rownames= FALSE)
#+end_src

#+RESULTS: sahelCellsTable
#+BEGIN_ORG
 | 30 min | 5 min   |
|--------+---------|
| 90343  | 3255015 |
| 90344  | 3255021 |
| 91063  | 3280935 |
| 91064  | 3280941 |
| 91065  | 3280947 |
| 91066  | 3280953 |
#+END_ORG

#+caption: Relationship between $30'$ ($0.5^{\circ}$) and $5'$ grid cells
#:label: fig:cells
#+begin_src ditaa :file images/cells.png :cmdline --no-separation --no-shadows
                            
           |                 |  
  89622    |     89623       |    89624
           |                 |             
     ------+-----------------+-------      
           |                 |             
  90342    |     90343       |    90344    
           |                 |           
           |                 |          
           |                 |          
           |     +--+        |     +--+       
           |     :  |        |     :  |       
           |     +--+        |     +--+       
           |       ^         |       ^        
           |       |         |       |        
           |       +-3255015 |       +-3255021
     ------+-----------------+-------  
           |                 |         
  91062    |     91063       |    91064  
           |                 |           
                                   
                          
#+end_src

#+RESULTS:
[[file:images/cells.png]]

#+begin_src R :results silent
  
  cat( sahelCells,
      file= "data/sahel.cells.30min",
      sep="\n")
  
  cat( translateCells( sahelCells),
      file= "data/sahel.cells.30min_5min",
      sep= "\n")
  
  cat( paste( substr( translateCells( sahelCells), 1, 3), translateCells( sahelCells), sep="/"),
      file= "data/sahel.dirs.30min_5min",
      sep= "\n")
  
#+end_src

#+begin_src sh :session *shell* :results output verbatim 
  set -x
  scp -BCq data/sahel.*30min* midway:/project/joshuaelliott/psims/gridLists/isimip
  set +x
#+end_src

#+RESULTS:
: 
: + scp -BCq data/sahel.cells.30min data/sahel.cells.30min_5min data/sahel.dirs.30min_5min midway:/project/joshuaelliott/psims/gridLists/isimip
: + set +x


* Niger
  :PROPERTIES:
  :session:  *R:2*
  :END:

#+begin_src R :results silent
  
  niger <-
    iso[ iso$NAME_0 %in%
        c( "Niger"), ]
  colnames( niger) <- c( "ISO", "Name")
  
  
#+end_src

#+name: nigerCountriesTable
#+begin_src R :results output org replace :exports both
  ascii(
    niger,
    include.rownames= FALSE)
#+end_src

#+RESULTS: nigerCountriesTable
#+BEGIN_ORG
 | ISO | Name  |
|-----+-------|
| NER | Niger |
#+END_ORG

#+name: nigerString()
#+begin_src R :results value verbatim replace :exports both
  whereClause <-
    sprintf(
      "-where 'ISO IN (\"%s\")'",
      paste(
        as.character( niger$ISO),
        collapse= "\",\""))
#+end_src

#+RESULTS: nigerString
: -where 'ISO IN ("NER")'

#+name: nigerOgrCmd()
#+begin_src R :results value verbatim replace
    paste( "ogr2ogr -progress -overwrite", whereClause,
          "data/niger.shp data/gadm2.shp gadm2")
#+end_src

#+RESULTS: nigerOgrCmd
: ogr2ogr -progress -overwrite -where 'ISO IN ("NER")' data/niger.shp data/gadm2.shp gadm2

  
#+name: nigerOgr
#+begin_src sh :results output replace :session *shell* :noweb yes
  <<nigerOgrCmd()>>
#+end_src


#+RESULTS: nigerOgr
: 
: 0...10...20...30...40...50...60...70...80...90...100 - done.

#+begin_src sh :results output replace :session *shell*
  gdal_rasterize -at -a_nodata 255 -init 255 -burn 1 \
    -te -180 -90 180 90 -tr 0.5 0.5 -ot Byte \
    -l niger data/niger.shp data/niger.tif
#+end_src

#+RESULTS:
: 
: > 0...10...20...30...40...50...60...70...80...90...100 - done.

#+CAPTION: Grid cells to model in Niger
#+LABEL:   fig:niger
[[images/niger.png]]


#+begin_src R
  niger <- raster( "data/niger.tif")
  NAvalue( niger) <- 255
  niger <- setMinMax( niger)
  
  nigerCells <- ( 1: ncell( niger))[ which( niger[] == 1)]
#+end_src

#+begin_src R :results silent
  
  cat( nigerCells,
      file= "data/niger.cells.30min",
      sep="\n")
  
  cat( translateCells( nigerCells),
      file= "data/niger.cells.30min_5min",
      sep= "\n")
  
  cat( paste( substr( translateCells( nigerCells), 1, 3), translateCells( nigerCells), sep="/"),
      file= "data/niger.dirs.30min_5min",
      sep= "\n")
  
#+end_src

#+begin_src sh :session *shell* :results output verbatim 
  set -x
  scp -BCq data/niger.*30min* midway:/project/joshuaelliott/psims/gridLists/isimip
  set +x
#+end_src

#+RESULTS:
: 
: + scp -BCq data/niger.cells.30min data/niger.cells.30min_5min data/niger.dirs.30min_5min midway:/project/joshuaelliott/psims/gridLists/isimip
: + set +x



* India
  :PROPERTIES:
  :session:  *R:2*
  :END:

#+begin_src R :results silent
  
  india <-
    iso[ iso$NAME_0 %in%
        c( "India"), ]
  colnames( india) <- c( "ISO", "Name")
  
  
#+end_src

#+name: indiaCountriesTable
#+begin_src R :results output org replace :exports both
  ascii(
    india,
    include.rownames= FALSE)
#+end_src

#+RESULTS: indiaCountriesTable
#+BEGIN_ORG
 | ISO | Name  |
|-----+-------|
| IND | India |
#+END_ORG

#+name: indiaString()
#+begin_src R :results value verbatim replace :exports both
  whereClause <-
    sprintf(
      "-where 'ISO IN (\"%s\")'",
      paste(
        as.character( india$ISO),
        collapse= "\",\""))
#+end_src

#+RESULTS: indiaString
: -where 'ISO IN ("IND")'

#+name: indiaOgrCmd()
#+begin_src R :results value verbatim replace
    paste( "ogr2ogr -progress -overwrite", whereClause,
          "data/india.shp data/gadm2.shp gadm2")
#+end_src

#+RESULTS: indiaOgrCmd
: ogr2ogr -progress -overwrite -where 'ISO IN ("IND")' data/india.shp data/gadm2.shp gadm2

  
#+name: indiaOgr
#+begin_src sh :results output replace :session *shell* :noweb yes
  <<indiaOgrCmd()>>
#+end_src


#+RESULTS: indiaOgr
: 0...10...20...30...40...50...60...70...80...90...100 - done.

#+begin_src sh :results output replace :session *shell*
  gdal_rasterize -at -a_nodata 255 -init 255 -burn 1 \
    -te -180 -90 180 90 -tr 0.5 0.5 -ot Byte \
    -l india data/india.shp data/india.tif
#+end_src

#+RESULTS:
: 
: > 0...10...20...30...40...50...60...70...80...90...100 - done.


#+begin_src R :results silent
  india <- raster( "data/india.tif")
  NAvalue( india) <- 255
  india <- setMinMax( india)
  india[ cellFromXY( india, c( 87.3, 27.8))] <- NA
  india <- writeRaster(
    india, "data/india.tif",
    overwrite=TRUE, datatype= "INT1U")
  
  indiaCells <- ( 1: ncell( india))[ which( india[] == 1)]
#+end_src

#+CAPTION: Grid cells to model in India
#+LABEL:   fig:india
[[images/india.png]]

#+begin_src R :results silent
  
  cat( indiaCells,
      file= "data/india.cells.30min",
      sep="\n")
  
  cat( translateCells( indiaCells),
      file= "data/india.cells.30min_5min",
      sep= "\n")
  
  cat( paste( substr( translateCells( indiaCells), 1, 3), translateCells( indiaCells), sep="/"),
      file= "data/india.dirs.30min_5min",
      sep= "\n")
  
#+end_src

#+begin_src sh :session *shell* :results output verbatim 
  set -x
  scp -BCq data/india.*30min* midway:/project/joshuaelliott/psims/gridLists/isimip
  set +x
#+end_src

#+RESULTS:
: 
: + scp -BCq data/india.cells.30min data/india.cells.30min_5min data/india.dirs.30min_5min midway:/project/joshuaelliott/psims/gridLists/isimip
: + set +x


